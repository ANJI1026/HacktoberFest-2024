#include <iostream>
#include <vector>
#include <string>
using namespace std;

class Solution {
public:
    vector<string> letterCombinations(string digits) {
        string mapping[] = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        vector<string> result;
        if (digits.empty()) return result;
        backtrack(result, mapping, digits, "", 0);
        return result;
    }

private:
    void backtrack(vector<string>& result, string mapping[], const string& digits, string current, int index) {
        if (current.length() == digits.length()) {
            result.push_back(current);
            return;
        }
        int digit = digits[index] - '0';
        string letters = mapping[digit];
        for (char letter : letters) {
            backtrack(result, mapping, digits, current + letter, index + 1);
        }
    }
};

int main() {
    Solution solution;
    string input = "23";
    vector<string> combinations = solution.letterCombinations(input);
    for (const string& combo : combinations) {
        cout << combo << " ";
    }
    cout << endl;
    return 0;
}
